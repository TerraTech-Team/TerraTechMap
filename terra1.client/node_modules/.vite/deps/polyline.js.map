{
  "version": 3,
  "sources": ["../../polyline/src/polyline.js"],
  "sourcesContent": ["'use strict';\n\n/**\n * Based off of [the offical Google document](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)\n *\n * Some parts from [this implementation](http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/PolylineEncoder.js)\n * by [Mark McClure](http://facstaff.unca.edu/mcmcclur/)\n *\n * @module polyline\n */\n\nvar polyline = {};\n\nfunction encode(coordinate, factor) {\n    coordinate = Math.round(coordinate * factor);\n    coordinate <<= 1;\n    if (coordinate < 0) {\n        coordinate = ~coordinate;\n    }\n    var output = '';\n    while (coordinate >= 0x20) {\n        output += String.fromCharCode((0x20 | (coordinate & 0x1f)) + 63);\n        coordinate >>= 5;\n    }\n    output += String.fromCharCode(coordinate + 63);\n    return output;\n}\n\n/**\n * Decodes to a [latitude, longitude] coordinates array.\n *\n * This is adapted from the implementation in Project-OSRM.\n *\n * @param {String} str\n * @param {Number} precision\n * @returns {Array}\n *\n * @see https://github.com/Project-OSRM/osrm-frontend/blob/master/WebContent/routing/OSRM.RoutingGeometry.js\n */\npolyline.decode = function(str, precision) {\n    var index = 0,\n        lat = 0,\n        lng = 0,\n        coordinates = [],\n        shift = 0,\n        result = 0,\n        byte = null,\n        latitude_change,\n        longitude_change,\n        factor = Math.pow(10, precision || 5);\n\n    // Coordinates have variable length when encoded, so just keep\n    // track of whether we've hit the end of the string. In each\n    // loop iteration, a single coordinate is decoded.\n    while (index < str.length) {\n\n        // Reset shift, result, and byte\n        byte = null;\n        shift = 0;\n        result = 0;\n\n        do {\n            byte = str.charCodeAt(index++) - 63;\n            result |= (byte & 0x1f) << shift;\n            shift += 5;\n        } while (byte >= 0x20);\n\n        latitude_change = ((result & 1) ? ~(result >> 1) : (result >> 1));\n\n        shift = result = 0;\n\n        do {\n            byte = str.charCodeAt(index++) - 63;\n            result |= (byte & 0x1f) << shift;\n            shift += 5;\n        } while (byte >= 0x20);\n\n        longitude_change = ((result & 1) ? ~(result >> 1) : (result >> 1));\n\n        lat += latitude_change;\n        lng += longitude_change;\n\n        coordinates.push([lat / factor, lng / factor]);\n    }\n\n    return coordinates;\n};\n\n/**\n * Encodes the given [latitude, longitude] coordinates array.\n *\n * @param {Array.<Array.<Number>>} coordinates\n * @param {Number} precision\n * @returns {String}\n */\npolyline.encode = function(coordinates, precision) {\n    if (!coordinates.length) { return ''; }\n\n    var factor = Math.pow(10, precision || 5),\n        output = encode(coordinates[0][0], factor) + encode(coordinates[0][1], factor);\n\n    for (var i = 1; i < coordinates.length; i++) {\n        var a = coordinates[i], b = coordinates[i - 1];\n        output += encode(a[0] - b[0], factor);\n        output += encode(a[1] - b[1], factor);\n    }\n\n    return output;\n};\n\nfunction flipped(coords) {\n    var flipped = [];\n    for (var i = 0; i < coords.length; i++) {\n        flipped.push(coords[i].slice().reverse());\n    }\n    return flipped;\n}\n\n/**\n * Encodes a GeoJSON LineString feature/geometry.\n *\n * @param {Object} geojson\n * @param {Number} precision\n * @returns {String}\n */\npolyline.fromGeoJSON = function(geojson, precision) {\n    if (geojson && geojson.type === 'Feature') {\n        geojson = geojson.geometry;\n    }\n    if (!geojson || geojson.type !== 'LineString') {\n        throw new Error('Input must be a GeoJSON LineString');\n    }\n    return polyline.encode(flipped(geojson.coordinates), precision);\n};\n\n/**\n * Decodes to a GeoJSON LineString geometry.\n *\n * @param {String} str\n * @param {Number} precision\n * @returns {Object}\n */\npolyline.toGeoJSON = function(str, precision) {\n    var coords = polyline.decode(str, precision);\n    return {\n        type: 'LineString',\n        coordinates: flipped(coords)\n    };\n};\n\nif (typeof module === 'object' && module.exports) {\n    module.exports = polyline;\n}\n"],
  "mappings": ";;;;;AAAA;AAAA;AAWA,QAAI,WAAW,CAAC;AAEhB,aAAS,OAAO,YAAY,QAAQ;AAChC,mBAAa,KAAK,MAAM,aAAa,MAAM;AAC3C,qBAAe;AACf,UAAI,aAAa,GAAG;AAChB,qBAAa,CAAC;AAAA,MAClB;AACA,UAAI,SAAS;AACb,aAAO,cAAc,IAAM;AACvB,kBAAU,OAAO,cAAc,KAAQ,aAAa,MAAS,EAAE;AAC/D,uBAAe;AAAA,MACnB;AACA,gBAAU,OAAO,aAAa,aAAa,EAAE;AAC7C,aAAO;AAAA,IACX;AAaA,aAAS,SAAS,SAAS,KAAK,WAAW;AACvC,UAAI,QAAQ,GACR,MAAM,GACN,MAAM,GACN,cAAc,CAAC,GACf,QAAQ,GACR,SAAS,GACT,OAAO,MACP,iBACA,kBACA,SAAS,KAAK,IAAI,IAAI,aAAa,CAAC;AAKxC,aAAO,QAAQ,IAAI,QAAQ;AAGvB,eAAO;AACP,gBAAQ;AACR,iBAAS;AAET,WAAG;AACC,iBAAO,IAAI,WAAW,OAAO,IAAI;AACjC,qBAAW,OAAO,OAAS;AAC3B,mBAAS;AAAA,QACb,SAAS,QAAQ;AAEjB,0BAAoB,SAAS,IAAK,EAAE,UAAU,KAAM,UAAU;AAE9D,gBAAQ,SAAS;AAEjB,WAAG;AACC,iBAAO,IAAI,WAAW,OAAO,IAAI;AACjC,qBAAW,OAAO,OAAS;AAC3B,mBAAS;AAAA,QACb,SAAS,QAAQ;AAEjB,2BAAqB,SAAS,IAAK,EAAE,UAAU,KAAM,UAAU;AAE/D,eAAO;AACP,eAAO;AAEP,oBAAY,KAAK,CAAC,MAAM,QAAQ,MAAM,MAAM,CAAC;AAAA,MACjD;AAEA,aAAO;AAAA,IACX;AASA,aAAS,SAAS,SAAS,aAAa,WAAW;AAC/C,UAAI,CAAC,YAAY,QAAQ;AAAE,eAAO;AAAA,MAAI;AAEtC,UAAI,SAAS,KAAK,IAAI,IAAI,aAAa,CAAC,GACpC,SAAS,OAAO,YAAY,CAAC,EAAE,CAAC,GAAG,MAAM,IAAI,OAAO,YAAY,CAAC,EAAE,CAAC,GAAG,MAAM;AAEjF,eAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AACzC,YAAI,IAAI,YAAY,CAAC,GAAG,IAAI,YAAY,IAAI,CAAC;AAC7C,kBAAU,OAAO,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,MAAM;AACpC,kBAAU,OAAO,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,MAAM;AAAA,MACxC;AAEA,aAAO;AAAA,IACX;AAEA,aAAS,QAAQ,QAAQ;AACrB,UAAIA,WAAU,CAAC;AACf,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,QAAAA,SAAQ,KAAK,OAAO,CAAC,EAAE,MAAM,EAAE,QAAQ,CAAC;AAAA,MAC5C;AACA,aAAOA;AAAA,IACX;AASA,aAAS,cAAc,SAAS,SAAS,WAAW;AAChD,UAAI,WAAW,QAAQ,SAAS,WAAW;AACvC,kBAAU,QAAQ;AAAA,MACtB;AACA,UAAI,CAAC,WAAW,QAAQ,SAAS,cAAc;AAC3C,cAAM,IAAI,MAAM,oCAAoC;AAAA,MACxD;AACA,aAAO,SAAS,OAAO,QAAQ,QAAQ,WAAW,GAAG,SAAS;AAAA,IAClE;AASA,aAAS,YAAY,SAAS,KAAK,WAAW;AAC1C,UAAI,SAAS,SAAS,OAAO,KAAK,SAAS;AAC3C,aAAO;AAAA,QACH,MAAM;AAAA,QACN,aAAa,QAAQ,MAAM;AAAA,MAC/B;AAAA,IACJ;AAEA,QAAI,OAAO,WAAW,YAAY,OAAO,SAAS;AAC9C,aAAO,UAAU;AAAA,IACrB;AAAA;AAAA;",
  "names": ["flipped"]
}
